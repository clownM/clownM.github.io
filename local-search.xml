<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Nginx接口代理去除前缀</title>
    <link href="/2021/07/16/Nginx%E6%8E%A5%E5%8F%A3%E4%BB%A3%E7%90%86%E5%8E%BB%E9%99%A4%E5%89%8D%E7%BC%80/"/>
    <url>/2021/07/16/Nginx%E6%8E%A5%E5%8F%A3%E4%BB%A3%E7%90%86%E5%8E%BB%E9%99%A4%E5%89%8D%E7%BC%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Nginx配置接口代理去除前缀"><a href="#Nginx配置接口代理去除前缀" class="headerlink" title="Nginx配置接口代理去除前缀"></a>Nginx配置接口代理去除前缀</h1><p>前端项目在使用nginx做接口反向代理时，有时候需要根据不同的接口前缀将请求代理到不同的服务器，但是真实的接口请求中又要去掉这个前缀。此时配置主要有两种写法 。</p><ul><li><h6 id="方法一：在地址后面加"><a href="#方法一：在地址后面加" class="headerlink" title="方法一：在地址后面加/"></a>方法一：在地址后面加/</h6></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br><span class="hljs-attribute">location</span><span class="hljs-regexp"> ^~/api/</span> &#123;<br><span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:8080/;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> <code>^~/api/</code>表示请求前缀是<code>api</code>的请求，<code>proxy_pass</code>最后加上<code>/</code>，就会把<code>api</code>去除，比 如请求的地址是<code>api/test</code>，则代理发出的请求是<code>http://127.0.0.1:8080/test</code></p><ul><li><h6 id="方法二：rewrite"><a href="#方法二：rewrite" class="headerlink" title="方法二：rewrite"></a>方法二：rewrite</h6><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br><span class="hljs-attribute">location</span><span class="hljs-regexp"> ^~/api/</span> &#123;<br><span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^/api/(.*)$</span> /<span class="hljs-variable">$1</span> <span class="hljs-literal">break</span>;<br><span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:8080;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用rewrite重写了url。<strong>注意：proxy_pass后不需要加/</strong></p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/06/22/hello-world/"/>
    <url>/2021/06/22/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>关于split,splice和slice</title>
    <link href="/2018/03/09/%E5%85%B3%E4%BA%8Esplit-splice%E5%92%8Cslice/"/>
    <url>/2018/03/09/%E5%85%B3%E4%BA%8Esplit-splice%E5%92%8Cslice/</url>
    
    <content type="html"><![CDATA[<p>1.split()方法是用于把一个字符串分割成字符串数组。</p><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs openscad"><span class="hljs-built_in">let</span> <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;a+b+c+d&quot;</span>;<br><span class="hljs-built_in">let</span> arr = <span class="hljs-built_in">str</span>.split(<span class="hljs-string">&quot;&quot;</span>);<br>console.<span class="hljs-built_in">log</span>(arr)<br><span class="hljs-built_in">let</span> arr2 = <span class="hljs-built_in">str</span>.split(<span class="hljs-string">&quot;+&quot;</span>);<br>console.<span class="hljs-built_in">log</span>(arr2)<br></code></pre></td></tr></table></figure><p>程序运行的结果是</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json">[<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;+&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;+&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-string">&quot;+&quot;</span>,<span class="hljs-string">&quot;d&quot;</span>]<br>[<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-string">&quot;d&quot;</span>]<br></code></pre></td></tr></table></figure><p>2.splice()方法向/从数组中添加/删除项目，然后返回被删除的项目。该方法会改变原始数组。</p><p>3.slice()方法可从已有的数组中返回选定的元素</p>]]></content>
    
    
    
    <tags>
      
      <tag>原生js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Chrome下getImageData的跨域问题</title>
    <link href="/2018/01/05/Chrome%E4%B8%8BgetImageData%E7%9A%84%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
    <url>/2018/01/05/Chrome%E4%B8%8BgetImageData%E7%9A%84%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>在用canvas写颜色取反demo时用到getImageData方法无法获取图片信息。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> canvas = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;mycanvas&quot;</span>);<br>    <span class="hljs-keyword">var</span> ctx = canvas.getContext(<span class="hljs-string">&quot;2d&quot;</span>);<br><br>    <span class="hljs-keyword">var</span> img = <span class="hljs-keyword">new</span> Image();<br>    img.src = <span class="hljs-string">&quot;res/cat1.jpg&quot;</span>;<br>    img.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        ctx.drawImage(img,<span class="hljs-number">10</span>,<span class="hljs-number">10</span>,<span class="hljs-number">300</span>,<span class="hljs-number">300</span>);<br>        <span class="hljs-keyword">var</span> drawing = ctx.getImageData(<span class="hljs-number">10</span>,<span class="hljs-number">10</span>,<span class="hljs-number">300</span>,<span class="hljs-number">300</span>);<br>        <span class="hljs-built_in">console</span>.log(drawing.data);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; drawing.data.length;i+=<span class="hljs-number">4</span>)&#123;<br>             drawing.data[i] = <span class="hljs-number">255</span> - drawing.data[i];<br>             drawing.data[i+<span class="hljs-number">1</span>] = <span class="hljs-number">255</span> - drawing.data[i+<span class="hljs-number">1</span>];<br>             drawing.data[i+<span class="hljs-number">2</span>] = <span class="hljs-number">255</span> - drawing.data[i+<span class="hljs-number">2</span>];<br>        &#125;;            <br>        ctx.putImageData(drawing,<span class="hljs-number">350</span>,<span class="hljs-number">10</span>);<br>    &#125;    <br>&#125;)();<br></code></pre></td></tr></table></figure><span id="more"></span><p>当在Chrome下预览时控制台报错，错误信息如下<code>Uncaught DOMException: Failed to execute &#39;getImageData&#39; on &#39;CanvasRenderingContext2D&#39;: The canvas has been tainted by cross-origin data. </code>，而在IE和Edge下就没有这种情况。</p><p>经过在网上查阅，错误原因是getImageData（）方法跨域问题。图片文件存储在本地，默认为没有域名，chrome浏览器判断为跨域才报错。（更深层次的原因还待挖掘）</p><p>解决方法：把demo放在apache服务器跑就不会报错。</p><p>结果图如下：<a href="https://imgchr.com/i/tT6h9"><img src="https://s1.ax1x.com/2017/10/20/tT6h9.png" alt="tT6h9.png"></a></p><p>注：图片素材来源为知乎网友，侵删。</p>]]></content>
    
    
    
    <tags>
      
      <tag>canvas</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于vue-cli快速构建</title>
    <link href="/2017/10/02/%E5%9F%BA%E4%BA%8Evue-cli%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BA/"/>
    <url>/2017/10/02/%E5%9F%BA%E4%BA%8Evue-cli%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<p>​    vue-cli是一个快速构建vue单页应用的脚手架。</p><h4 id="npm全局安装vue-cli步骤"><a href="#npm全局安装vue-cli步骤" class="headerlink" title="npm全局安装vue-cli步骤"></a><strong>npm全局安装vue-cli步骤</strong></h4><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta">#全局安装 vue-cli</span><br>npm install --global vue-cli<br><span class="hljs-meta">#新建项目</span><br>vue init webpack myProject<br><span class="hljs-meta">#进入项目目录</span><br>cd myProject<br><span class="hljs-meta">#安装相关依赖</span><br>npm install<br></code></pre></td></tr></table></figure><span id="more"></span><h4 id="其他相关命令"><a href="#其他相关命令" class="headerlink" title="其他相关命令**"></a>其他相关命令**</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#开发环境预览项目</span><br>npm <span class="hljs-builtin-name">run</span> dev<br><span class="hljs-comment">#打包部署至服务器</span><br>npm <span class="hljs-builtin-name">run</span> build<br><span class="hljs-comment">#删除依赖（node_modules文件夹）</span><br>rimraf node_modules<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>移动端开发</title>
    <link href="/2017/09/27/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    <url>/2017/09/27/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h4 id="meta标签"><a href="#meta标签" class="headerlink" title="meta标签"></a>meta标签</h4><p>移动端开发中头部经常添加的meta</p><ol><li><p>这个meta可以使文档的宽度与设备的宽度保持1:1，初始缩放比例是1.0，不允许用户通过点击或者缩放等操作对屏幕放大浏览（ios10以上失效），文档最大宽度比例是1.0。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width,initial scale=1.0,user-scalable=no,maxinum-scale=1.0&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>禁止ios自动识别电话。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;telephone=no&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;format-detection&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><span id="more"></span></li><li><p>禁止android自动识别邮箱。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;email=no&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;format-detection&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>网站开启对web app程序的支持，删除默认的苹果safari工具栏和菜单栏。</p><p>content有两个值”yes”和”no”,当我们需要显示工具栏和菜单栏时，这行meta就不用加了，默认就是显示。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;apple-mobile-web-app-capable&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;yes&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>控制状态栏（屏幕顶部条）显示样式。</p><p> &lt;!–  可选default(白色)、black（黑色）、black-translucent（灰色半透明）。若值为“black-translucent”将会占据页面px位置，浮在页面上方（会覆盖页面20px高度–iphone4和itouch4的Retina屏幕为40px）。 –&gt;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;apple-mobile-web-app-status-bar-style&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;black&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​</p></li></ol><h4 id="打电话发短信"><a href="#打电话发短信" class="headerlink" title="打电话发短信"></a>打电话发短信</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;tel:110&quot;</span>&gt;</span>打电话给:110<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;sms:10086&quot;</span>&gt;</span>发短信给: 10086<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="ios中去掉input等默认样式"><a href="#ios中去掉input等默认样式" class="headerlink" title="ios中去掉input等默认样式"></a>ios中去掉input等默认样式</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">input</span>,<span class="hljs-selector-tag">button</span>,<span class="hljs-selector-tag">textarea</span>&#123;-webkit-appearance: none;&#125;<br></code></pre></td></tr></table></figure><h4 id="移动端click屏幕产生200-300-ms的延迟响应"><a href="#移动端click屏幕产生200-300-ms的延迟响应" class="headerlink" title="移动端click屏幕产生200-300 ms的延迟响应"></a>移动端click屏幕产生200-300 ms的延迟响应</h4><p>click事件因为要等待确认是否是双击事件，会有300ms的延迟（两次点击事件间隔小于300ms就认为是双击），用户体验不好。解决方案第一个就是采用touchstart或者touchend代替click；或者封装tap事件来代替click 事件，tap事件由touchstart事件+ touchmove（判断是否是滑动事件）+touchend事件封装组成。</p><p>在手机上，click的延迟将近400ms。对于用户而言，是一个很严重的延迟了！所以在手机上，并不建议用click。</p><p>​</p><p>​</p><p>​</p>]]></content>
    
    
    
    <tags>
      
      <tag>移动端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端面试宝典</title>
    <link href="/2017/07/09/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%AE%9D%E5%85%B8/"/>
    <url>/2017/07/09/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%AE%9D%E5%85%B8/</url>
    
    <content type="html"><![CDATA[<h4 id="HTML-部分"><a href="#HTML-部分" class="headerlink" title="HTML 部分"></a>HTML 部分</h4><h5 id="1-Doctype的作用？严格模式与混杂模式？"><a href="#1-Doctype的作用？严格模式与混杂模式？" class="headerlink" title="1.Doctype的作用？严格模式与混杂模式？"></a>1.Doctype的作用？严格模式与混杂模式？</h5><p>（1）、&lt;!DOCTYPE&gt; 声明位于文档中的最前面，处于 <html> 标签之前。告知浏览器的解析器，用什么文档类型 规范来解析这个文档。 </p><p>（2）、严格模式的排版和 JS 运作模式是 以该浏览器支持的最高标准运行。</p><p>（3）、在混杂模式中，页面以宽松的向后兼容的方式显示。模拟老式浏览器的行为以防止站点无法工作。</p><span id="more"></span><h5 id="2-行内元素有哪些？块级元素有哪些？空元素有哪些？"><a href="#2-行内元素有哪些？块级元素有哪些？空元素有哪些？" class="headerlink" title="2.行内元素有哪些？块级元素有哪些？空元素有哪些？"></a>2.行内元素有哪些？块级元素有哪些？空元素有哪些？</h5><p>行内元素：a b span img select input</p><p>块级元素：div ul ol li dl dt dd h1 h2… p</p><p>常见的空元素：br hr img input link meta</p><h5 id="3-对浏览器内核的理解"><a href="#3-对浏览器内核的理解" class="headerlink" title="3.对浏览器内核的理解"></a>3.对浏览器内核的理解</h5><p>主要分为两部分：渲染引擎和JS引擎。</p><p>渲染引擎：负责获取页面的内容（html、xml、图像等）、整理讯息（加载CSS等），以及计算网页的显示方式，然后会输出至显示器。</p><p>JS引擎：解析和执行JS文件来实现网页的动态效果。</p><p>最开始渲染引擎和JS引擎没有区分地很明确，后来JS引擎越来越独立，内核就倾向于只指渲染引擎。</p><h5 id="4-常见的浏览器内核有哪些-？"><a href="#4-常见的浏览器内核有哪些-？" class="headerlink" title="4.常见的浏览器内核有哪些 ？"></a>4.常见的浏览器内核有哪些 ？</h5><p>Trident：IE浏览器；360浏览器；搜狗浏览器</p><p>Gecko：Firefox浏览器</p><p>Webkit：Safari浏览器，也是Chrome浏览器的内核原型；</p><p>Blink：Chrome浏览器，Opera浏览器。</p><p>Presto：Opera7及以上（Opera内核原为Presto，现为Blink）</p><h5 id="5-html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分-HTML-和-HTML5？"><a href="#5-html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分-HTML-和-HTML5？" class="headerlink" title="5.html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？"></a>5.html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？</h5><p>HTML5现在已经不是 SGML 的子集，主要是关于图像，位置，存储，多任务等功能的增加。</p><ol><li>绘画 canvas</li><li>用于媒介回放的 video 和 audio 元素</li><li>本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失；sessionStorage 的数据在浏览器关闭后自动删除。</li><li>语意化更好的内容元素，比如 article、footer、header、nav、section</li><li>表单控件，calendar、date、time、email、url、search </li><li>新的技术webworker, websockt, Geolocation</li><li>移除的元素-纯表现的元素：basefont，big，center，font, s，strike，tt，u</li><li>对可用性产生负面影响的元素：frame，frameset，noframes；</li></ol><h5 id="6-iframe有那些缺点？"><a href="#6-iframe有那些缺点？" class="headerlink" title="6.iframe有那些缺点？"></a>6.iframe有那些缺点？</h5><p>iframe会阻塞主页面的Onload事件；</p><p>iframe和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载。</p><p>使用iframe之前需要考虑这两个缺点。如果需要使用iframe，最好是通过javascript动态给iframe添加src属性值，这样可以可以绕开以上两个问题。</p><h5 id="7-请描述一下-cookies，sessionStorage-和-localStorage-的区别？"><a href="#7-请描述一下-cookies，sessionStorage-和-localStorage-的区别？" class="headerlink" title="7.请描述一下 cookies，sessionStorage 和 localStorage 的区别？"></a>7.请描述一下 cookies，sessionStorage 和 localStorage 的区别？</h5><p>cookie是网站为了标示用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）。cookie数据始终在同源的http请求中携带（即使不需要），即会在浏览器和服务器间来回传递。</p><p>sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。</p><p>存储大小：</p><ul><li>cookie数据大小不能超过4k。</li><li>sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。</li></ul><p>有效时间：</p><ul><li>localStorage 存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；</li><li>essionStorage 数据在当前浏览器窗口关闭后自动删除。</li><li>cookie 设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭。</li></ul><h5 id="8-页面可见性（Page-Visibility-API）-可以有哪些用途？"><a href="#8-页面可见性（Page-Visibility-API）-可以有哪些用途？" class="headerlink" title="8.页面可见性（Page Visibility API） 可以有哪些用途？"></a>8.页面可见性（Page Visibility API） 可以有哪些用途？</h5><p> 通过 visibilityState 的值检测页面当前是否可见，以及打开网页的时间等;<br>在页面被切换到其他后台进程的时候，自动暂停音乐或视频的播放；</p><h4 id="CSS部分"><a href="#CSS部分" class="headerlink" title="CSS部分"></a>CSS部分</h4><h5 id="1-盒子模型"><a href="#1-盒子模型" class="headerlink" title="1.盒子模型"></a>1.盒子模型</h5><p>有两种：IE 盒子模型、标准 W3C 盒子模型；</p><p>盒模型：内容(content)、填充(padding)、边界(margin)、 边框(border).</p><p>区    别：IE的content部分包含了 border 和 pading;</p><h5 id="2-CSS-选择符有哪些？哪些属性可以继承？"><a href="#2-CSS-选择符有哪些？哪些属性可以继承？" class="headerlink" title="2.CSS 选择符有哪些？哪些属性可以继承？"></a>2.CSS 选择符有哪些？哪些属性可以继承？</h5><p>选择器：</p><p>​    1.id选择器（ # myid）<br>​    2.类选择器（.myclassname）<br>​    3.标签选择器（div, h1, p）<br>​    4.相邻选择器（h1 + p）<br>​    5.子选择器（ul &gt; li）<br>​    6.后代选择器（li a）<br>​    7.通配符选择器（ * ）<br>​    8.属性选择器（a[rel = “external”]）<br>​    9.伪类选择器（a:hover, li:nth‐child）</p><p>可继承的属性：font‐size font‐family color, UL LI DL DD DT;</p><p>不可继承的属性：border padding margin width height ;</p><h5 id="3-优先级算法如何计算？"><a href="#3-优先级算法如何计算？" class="headerlink" title="3.优先级算法如何计算？"></a>3.优先级算法如何计算？</h5><p>优先级就近原则，同权重情况下样式定义最近者为准;</p><p>载入样式以最后载入的定位为准;<br>优先级为:<br>!important &gt; id &gt; class &gt; tag<br>important 比 内联优先级高</p><h5 id="4-CSS3新增伪类有那些？"><a href="#4-CSS3新增伪类有那些？" class="headerlink" title="4.CSS3新增伪类有那些？"></a>4.CSS3新增伪类有那些？</h5><p>p:first-of-type    –&gt;    选择属于其父元素的首个&lt; p &gt;元素的每个 &lt; p &gt; 元素。<br>p:last-of-type    –&gt;    选择属于其父元素的最后 &lt; p &gt; 元素的每个 &lt; p &gt; 元素。<br>p:only-of-type    –&gt;    选择属于其父元素唯一的 &lt; p &gt; 元素的每个 &lt; p &gt; 元素。<br>p:only-child    –&gt;    选择属于其父元素的唯一子元素的每个 &lt; p &gt; 元素。<br>p:nth-child(2)    –&gt;    选择属于其父元素的第二个子元素的每个 &lt; p &gt; 元素。<br>:enableddisabled    –&gt;    控制表单控件的禁用状态。<br>:checked    –&gt;    单选框或复选框被选中。</p>]]></content>
    
    
    
    <tags>
      
      <tag>前端 面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我们毕业了</title>
    <link href="/2017/07/06/%E6%88%91%E4%BB%AC%E6%AF%95%E4%B8%9A%E4%BA%86/"/>
    <url>/2017/07/06/%E6%88%91%E4%BB%AC%E6%AF%95%E4%B8%9A%E4%BA%86/</url>
    
    <content type="html"><![CDATA[<p>​    2017年6月8日，我们2013届学生在学校新建的文体中心里参加了学校主办的毕业典礼，四年的大学生活到这里也就结束了。在主席台上面，我们每个人都拿到了自己的毕业证与学位证。</p><p>​    2017年6月10日，作为寝室里最后走的几个人，我们一起去东站送大博，在大博进站的时候，眼泪不争气的涌了出来。之前虽然也觉得自己是一个感性的人，但是没有想到会在车站大厅，在那么多人面前自己能哭出来。</p><span id="more"></span><center>电影可以剪辑，</center><center>小说可以停、跳……</center><center>生活真是可悲，</center><center>只有快乐时，</center><center>生活和电影一样，</center><center>一瞬间就过去了。</center><br><center>木心（来源：柴扉APP）</center><p><img src="http://i4.piimg.com/599796/c65e42ac5fb3701d.jpg" alt="Markdown"></p><p><img src="http://i2.kiimg.com/599796/2dfa520db0fb6c9d.jpg" alt="Markdown"></p>]]></content>
    
    
    
    <tags>
      
      <tag>感想</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
